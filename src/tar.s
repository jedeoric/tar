;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.forceimport	initmainargs
	.import		_fopen
	.import		_fread
	.import		_printf
	.export		_tar_header
	.export		_verbose
	.export		_main

.segment	"RODATA"

L0035:
	.byte	$43,$61,$6E,$27,$74,$20,$6F,$70,$65,$6E,$20,$25,$73,$0A,$00
L0016:
	.byte	$4D,$6F,$64,$65,$3A,$20,$25,$73,$0A,$00
L0022:
	.byte	$53,$69,$7A,$65,$3A,$20,$25,$73,$0A,$00
L0012:
	.byte	$4E,$61,$6D,$65,$3A,$20,$25,$73,$0A,$00
L001A:
	.byte	$55,$69,$64,$3A,$20,$25,$73,$0A,$00
L001E:
	.byte	$47,$69,$64,$3A,$20,$25,$73,$0A,$00
L003C:
	.byte	$4F,$70,$65,$6E,$0A,$00
L002F:
	.byte	$72,$00

.segment	"BSS"

_tar_header:
	.res	500,$00

; ---------------------------------------------------------------
; void __near__ verbose (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_verbose: near

.segment	"CODE"

	lda     #<(L0012)
	ldx     #>(L0012)
	jsr     pushax
	lda     #<(_tar_header)
	ldx     #>(_tar_header)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0016)
	ldx     #>(L0016)
	jsr     pushax
	lda     #<(_tar_header+100)
	ldx     #>(_tar_header+100)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L001A)
	ldx     #>(L001A)
	jsr     pushax
	lda     #<(_tar_header+108)
	ldx     #>(_tar_header+108)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L001E)
	ldx     #>(L001E)
	jsr     pushax
	lda     #<(_tar_header+116)
	ldx     #>(_tar_header+116)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0022)
	ldx     #>(L0022)
	jsr     pushax
	lda     #<(_tar_header+124)
	ldx     #>(_tar_header+124)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ __cdecl__ main (int, __near__ unsigned char * *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp6
	ldy     #$09
	jsr     ldaxysp
	cpx     #$00
	bne     L0028
	cmp     #$02
L0028:	jsr     boolne
	jeq     L0026
	ldx     #$00
	lda     #$01
	jmp     L0025
L0026:	ldy     #$07
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     pushax
	lda     #<(L002F)
	ldx     #>(L002F)
	jsr     _fopen
	ldy     #$04
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	cpx     #$00
	bne     L0033
	cmp     #$00
L0033:	jsr     booleq
	jeq     L0031
	lda     #<(L0035)
	ldx     #>(L0035)
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     #$01
	jmp     L0025
L0031:	lda     #<(L003C)
	ldx     #>(L003C)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(_tar_header)
	ldx     #>(_tar_header)
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+100)
	ldx     #>(_tar_header+100)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+108)
	ldx     #>(_tar_header+108)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+116)
	ldx     #>(_tar_header+116)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+124)
	ldx     #>(_tar_header+124)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+136)
	ldx     #>(_tar_header+136)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+148)
	ldx     #>(_tar_header+148)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+156)
	ldx     #>(_tar_header+156)
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+157)
	ldx     #>(_tar_header+157)
	jsr     pushax
	ldx     #$00
	lda     #$64
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+257)
	ldx     #>(_tar_header+257)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+263)
	ldx     #>(_tar_header+263)
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+265)
	ldx     #>(_tar_header+265)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+297)
	ldx     #>(_tar_header+297)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+329)
	ldx     #>(_tar_header+329)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+337)
	ldx     #>(_tar_header+337)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	lda     #<(_tar_header+345)
	ldx     #>(_tar_header+345)
	jsr     pushax
	ldx     #$00
	lda     #$9B
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	jsr     _verbose
L0025:	ldy     #$0A
	jsr     addysp
	rts

.endproc

