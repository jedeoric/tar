;
; File generated by cc65 v 2.16 - Git N/A
;
	.fopt		compiler,"cc65 v 2.16 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.forceimport	initmainargs
	.import		_fclose
	.import		_feof
	.import		_fopen
	.import		_fread
	.import		_printf
	.import		_fileno
	.import		_strcmp
	.import		_strlen
	.import		_print
	.import		_returnline
	.import		_read
	.export		_size
	.export		_tar_header
	.export		_verbose
	.export		_debug
	.export		_extract
	.export		_buffer_file_to_extract
	.export		_version
	.export		_usage
	.export		_print_debug
	.export		_extract_files
	.export		_manage_option
	.export		_main

.segment	"DATA"

_verbose:
	.byte	$00
_debug:
	.byte	$00
_extract:
	.byte	$00

.segment	"RODATA"

L0036:
	.byte	$2D,$2D,$76,$65,$72,$73,$69,$6F,$6E,$20,$3A,$20,$70,$72,$69,$6E
	.byte	$74,$20,$76,$65,$72,$73,$69,$6F,$6E,$00
L00B9:
	.byte	$44,$65,$6D,$61,$6E,$64,$65,$20,$3A,$20,$25,$64,$20,$72,$65,$63
	.byte	$75,$20,$3A,$20,$25,$64,$0A,$00
L001E:
	.byte	$74,$61,$72,$20,$5B,$78,$5D,$5B,$76,$5D,$5B,$64,$5D,$20,$46,$49
	.byte	$4C,$45,$4E,$41,$4D,$45,$00
L00A3:
	.byte	$42,$79,$74,$65,$73,$20,$72,$65,$61,$64,$20,$3A,$20,$25,$64,$0A
	.byte	$00
L005D:
	.byte	$20,$20,$52,$65,$67,$75,$6C,$61,$72,$20,$66,$69,$6C,$65,$0A,$00
L0102:
	.byte	$43,$61,$6E,$27,$74,$20,$6F,$70,$65,$6E,$20,$25,$73,$0A,$00
L00AD:
	.byte	$45,$78,$74,$72,$61,$63,$74,$69,$6E,$67,$20,$25,$73,$0A,$00
L007D:
	.byte	$44,$65,$76,$6D,$69,$6E,$6F,$72,$3A,$20,$25,$73,$0A,$00
L0022:
	.byte	$74,$61,$72,$20,$2D,$2D,$76,$65,$72,$73,$69,$6F,$6E,$00
L0065:
	.byte	$4C,$69,$6E,$6B,$6E,$61,$6D,$65,$3A,$20,$25,$73,$0A,$00
L0057:
	.byte	$54,$79,$70,$65,$66,$6C,$61,$67,$3A,$20,$25,$63,$0A,$00
L0079:
	.byte	$44,$65,$76,$6D,$61,$6A,$6F,$72,$3A,$20,$25,$73,$0A,$00
L006D:
	.byte	$56,$65,$72,$73,$69,$6F,$6E,$3A,$20,$25,$73,$0A,$00
L009E:
	.byte	$66,$69,$6C,$65,$6E,$6F,$20,$3A,$20,$25,$64,$0A,$00
L0086	:=	L009E+0
L0081:
	.byte	$50,$72,$65,$66,$69,$78,$3A,$20,$25,$73,$0A,$00
L002E:
	.byte	$76,$20,$3A,$20,$76,$65,$72,$62,$6F,$73,$65,$00
L002A:
	.byte	$78,$20,$3A,$20,$65,$78,$74,$72,$61,$63,$74,$00
L0053:
	.byte	$43,$68,$6B,$73,$75,$6D,$3A,$20,$25,$73,$0A,$00
L0069:
	.byte	$4D,$61,$67,$69,$63,$3A,$20,$25,$73,$0A,$00
L004F:
	.byte	$4D,$74,$69,$6D,$65,$3A,$20,$25,$73,$0A,$00
L0071:
	.byte	$55,$6E,$61,$6D,$65,$3A,$20,$25,$73,$0A,$00
L0075:
	.byte	$47,$6E,$61,$6D,$65,$3A,$20,$25,$73,$0A,$00
L0026:
	.byte	$4F,$70,$74,$69,$6F,$6E,$73,$20,$3A,$20,$00
L0016:
	.byte	$74,$61,$72,$20,$30,$2E,$30,$2E,$31,$0A,$00
L004B:
	.byte	$53,$69,$7A,$65,$3A,$20,$25,$64,$0A,$00
L00DE	:=	L0022+4
L008E:
	.byte	$46,$70,$20,$69,$73,$20,$65,$6F,$66,$00
L009B	:=	L008E+0
L0032:
	.byte	$64,$20,$3A,$20,$64,$65,$62,$75,$67,$00
L003F:
	.byte	$4D,$6F,$64,$65,$3A,$20,$25,$73,$0A,$00
L003B:
	.byte	$4E,$61,$6D,$65,$3A,$20,$25,$73,$0A,$00
L0062:
	.byte	$20,$20,$46,$6F,$6C,$64,$65,$72,$0A,$00
L0047:
	.byte	$47,$69,$64,$3A,$20,$25,$73,$0A,$00
L0043:
	.byte	$55,$69,$64,$3A,$20,$25,$73,$0A,$00
L001A:
	.byte	$75,$73,$61,$67,$65,$3A,$20,$00
L00FC:
	.byte	$72,$00

.segment	"BSS"

_size:
	.res	2,$00
_tar_header:
	.res	500,$00
_buffer_file_to_extract:
	.res	20000,$00

; ---------------------------------------------------------------
; void __near__ version (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_version: near

.segment	"CODE"

	lda     #<(L0016)
	ldx     #>(L0016)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ usage (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_usage: near

.segment	"CODE"

	lda     #<(L001A)
	ldx     #>(L001A)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L001E)
	ldx     #>(L001E)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L0022)
	ldx     #>(L0022)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L0026)
	ldx     #>(L0026)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L002A)
	ldx     #>(L002A)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L002E)
	ldx     #>(L002E)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L0032)
	ldx     #>(L0032)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	lda     #<(L0036)
	ldx     #>(L0036)
	jsr     _print
	ldy     #$00
	jsr     _returnline
	jmp     L0018
L0018:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ print_debug (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_debug: near

.segment	"CODE"

	lda     #<(L003B)
	ldx     #>(L003B)
	jsr     pushax
	lda     #<(_tar_header)
	ldx     #>(_tar_header)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L003F)
	ldx     #>(L003F)
	jsr     pushax
	lda     #<(_tar_header+100)
	ldx     #>(_tar_header+100)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0043)
	ldx     #>(L0043)
	jsr     pushax
	lda     #<(_tar_header+108)
	ldx     #>(_tar_header+108)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0047)
	ldx     #>(L0047)
	jsr     pushax
	lda     #<(_tar_header+116)
	ldx     #>(_tar_header+116)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L004B)
	ldx     #>(L004B)
	jsr     pushax
	lda     _size
	ldx     _size+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L004F)
	ldx     #>(L004F)
	jsr     pushax
	lda     #<(_tar_header+136)
	ldx     #>(_tar_header+136)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0053)
	ldx     #>(L0053)
	jsr     pushax
	lda     #<(_tar_header+148)
	ldx     #>(_tar_header+148)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0057)
	ldx     #>(L0057)
	jsr     pushax
	ldx     #$00
	lda     _tar_header+156
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     _tar_header+156
	cmp     #$30
	jsr     booleq
	jeq     L005A
	lda     #<(L005D)
	ldx     #>(L005D)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L005A:	ldx     #$00
	lda     _tar_header+156
	cmp     #$35
	jsr     booleq
	jeq     L005F
	lda     #<(L0062)
	ldx     #>(L0062)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L005F:	lda     #<(L0065)
	ldx     #>(L0065)
	jsr     pushax
	lda     #<(_tar_header+157)
	ldx     #>(_tar_header+157)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0069)
	ldx     #>(L0069)
	jsr     pushax
	lda     #<(_tar_header+257)
	ldx     #>(_tar_header+257)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L006D)
	ldx     #>(L006D)
	jsr     pushax
	lda     #<(_tar_header+263)
	ldx     #>(_tar_header+263)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0071)
	ldx     #>(L0071)
	jsr     pushax
	lda     #<(_tar_header+265)
	ldx     #>(_tar_header+265)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0075)
	ldx     #>(L0075)
	jsr     pushax
	lda     #<(_tar_header+297)
	ldx     #>(_tar_header+297)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0079)
	ldx     #>(L0079)
	jsr     pushax
	lda     #<(_tar_header+329)
	ldx     #>(_tar_header+329)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L007D)
	ldx     #>(L007D)
	jsr     pushax
	lda     #<(_tar_header+337)
	ldx     #>(_tar_header+337)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L0081)
	ldx     #>(L0081)
	jsr     pushax
	lda     #<(_tar_header+345)
	ldx     #>(_tar_header+345)
	jsr     pushax
	ldy     #$04
	jsr     _printf
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ extract_files (__near__ struct _FILE *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_extract_files: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	lda     #<(L0086)
	ldx     #>(L0086)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     _fileno
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldy     #$05
	jsr     ldaxysp
	jsr     _feof
	stx     tmp1
	ora     tmp1
	jeq     L008A
	lda     #<(L008E)
	ldx     #>(L008E)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L008A:	lda     #<(_tar_header)
	ldx     #>(_tar_header)
	jsr     pushax
	ldx     #$01
	lda     #$F4
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     _fread
	ldy     #$02
	jsr     staxysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _feof
	stx     tmp1
	ora     tmp1
	jeq     L0097
	lda     #<(L009B)
	ldx     #>(L009B)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0097:	lda     #<(L009E)
	ldx     #>(L009E)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     _fileno
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(L00A3)
	ldx     #>(L00A3)
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     _tar_header+135
	jsr     pushax
	ldx     #$00
	lda     _tar_header+134
	jsr     pushax
	ldx     #$00
	lda     #$FF
	jsr     tosumulax
	jsr     tosaddax
	sta     _size
	stx     _size+1
	ldx     #$00
	lda     _verbose
	cmp     #$01
	jsr     booleq
	jeq     L00AA
	lda     #<(L00AD)
	ldx     #>(L00AD)
	jsr     pushax
	lda     #<(_tar_header)
	ldx     #>(_tar_header)
	jsr     pushax
	ldy     #$04
	jsr     _printf
L00AA:	ldx     #$00
	lda     _debug
	cmp     #$01
	jsr     booleq
	jeq     L00B0
	jsr     _print_debug
L00B0:	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	lda     #<(_buffer_file_to_extract)
	ldx     #>(_buffer_file_to_extract)
	jsr     pushax
	lda     _size
	ldx     _size+1
	jsr     _read
	ldy     #$02
	jsr     staxysp
	lda     #<(L00B9)
	ldx     #>(L00B9)
	jsr     pushax
	lda     _size
	ldx     _size+1
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     pushax
	ldy     #$06
	jsr     _printf
	jsr     incsp6
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ manage_option (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_manage_option: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	ldx     #$00
	lda     #$00
	ldy     #$00
	sta     (sp),y
L00BE:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     _strlen
	jsr     tosultax
	jne     L00C1
	jmp     L00BF
L00C1:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	cmp     #$76
	jsr     booleq
	jeq     L00C7
	ldx     #$00
	lda     #$01
	sta     _verbose
L00C7:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	cmp     #$64
	jsr     booleq
	jeq     L00CC
	ldx     #$00
	lda     #$01
	sta     _debug
L00CC:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	cmp     #$78
	jsr     booleq
	jeq     L00C0
	ldx     #$00
	lda     #$01
	sta     _extract
L00C0:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	pha
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	pla
	jmp     L00BE
L00BF:	ldx     #$00
	lda     #$00
	jmp     L00BD
L00BD:	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ __cdecl__ main (int, __near__ unsigned char * *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp7
	ldy     #$0A
	jsr     ldaxysp
	cpx     #$00
	bne     L00DA
	cmp     #$02
L00DA:	jsr     booleq
	jeq     L00DB
	ldy     #$08
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     pushax
	lda     #<(L00DE)
	ldx     #>(L00DE)
	jsr     _strcmp
	cpx     #$00
	bne     L00E0
	cmp     #$00
L00E0:	jsr     booleq
	jne     L00D9
L00DB:	ldx     #$00
	lda     #$00
	jeq     L00E1
L00D9:	ldx     #$00
	lda     #$01
L00E1:	jeq     L00D8
	jsr     _version
	ldx     #$00
	lda     #$01
	jmp     L00D7
L00D8:	ldy     #$08
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     _manage_option
	ldy     #$00
	sta     (sp),y
	ldy     #$0A
	jsr     ldaxysp
	cpx     #$00
	bne     L00EB
	cmp     #$03
L00EB:	jsr     boolne
	jne     L00EA
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     boolne
	jne     L00EA
	ldx     #$00
	lda     #$00
	jeq     L00EC
L00EA:	ldx     #$00
	lda     #$01
L00EC:	jeq     L00E9
	jsr     _usage
	ldx     #$00
	lda     #$01
	jmp     L00D7
L00E9:	ldy     #$08
	jsr     ldaxysp
	ldy     #$05
	jsr     ldaxidx
	jsr     _strlen
	cpx     #$00
	bne     L00F4
	cmp     #$00
L00F4:	jsr     booleq
	jeq     L00F0
	jsr     _usage
	ldx     #$00
	lda     #$01
	jmp     L00D7
L00F0:	ldy     #$08
	jsr     ldaxysp
	ldy     #$05
	jsr     ldaxidx
	jsr     pushax
	lda     #<(L00FC)
	ldx     #>(L00FC)
	jsr     _fopen
	ldy     #$05
	jsr     staxysp
	ldy     #$06
	jsr     ldaxysp
	cpx     #$00
	bne     L0100
	cmp     #$00
L0100:	jsr     booleq
	jeq     L00FE
	lda     #<(L0102)
	ldx     #>(L0102)
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$05
	jsr     ldaxidx
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     #$01
	jmp     L00D7
L00FE:	ldx     #$00
	lda     _extract
	cmp     #$01
	jsr     booleq
	jeq     L0108
	ldy     #$06
	jsr     ldaxysp
	jsr     _extract_files
L0108:	ldy     #$06
	jsr     ldaxysp
	jsr     _fclose
L00D7:	ldy     #$0B
	jsr     addysp
	rts

.endproc

